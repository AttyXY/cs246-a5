#!/bin/bash
#
# Executes given solution to a problem with diff arguments, with optional input
# from stdin, and compares against expected output
#
# Args:
#   suite-file: path to file containing test filename stems (delimiter: spaces) 
#   program: path to program to test
#
# Raises:
#   If incorrect number of command line arguments are supplied or expected
#   output file does not exist: Will exit w/ non-zero status, and print error 
#   msg to sterr.
#
# Example:
#   PS1$ ./runSuite suite.txt ./myprogram

readonly INCORRECT_NUM_ARGS_STATUS=7
readonly INCORRECT_NUM_ARGS_MSG="Incorrect number of arguments supplied.\
                                 Please supply 2 arguments: suite-file, program."
readonly OUT_FILE_DNE_STATUS=8
readonly OUT_FILE_DNE_MSG="does not exist or is unreadable. Please \
                           resolve before attempting to retest."

# Input validation 
suite_file=$1
program=$2

if [[ $# != 2 ]]; then 
    echo $INCORRECT_NUM_ARGS_MSG >&2
    exit $INCORRECT_NUM_ARGS_STATUS
fi

# Compare program output to expected output for every test 
test_files=$(cat $suite_file)

for file in $test_files; do 
    arg_file="${file}.args"
    out_file="${file}.out"
    in_file="${file}.in"

    # .out file validation
    if [ ! -r $out_file ]; then
        echo "Expected output file $out_file $OUT_FILE_DNE_MSG" >&2 
        exit $INCORRECT_NUM_ARGS_MSG 
    fi

    # Generate tmp output 
    tmp_out_file=$(mktemp "${out_file}XXXXXX")
    cmd_args=$""
    if [ -r $arg_file ]; then
        cmd_args=$(cat $arg_file)
    fi
        
    if [ -r $in_file ]; then
        "$program" $cmd_args < $in_file > "$tmp_out_file"
    else
          "$program" $cmd_args > "$tmp_out_file"
    fi

    # Compare tmp output to expected output
    if ! diff $out_file $tmp_out_file > /dev/null; then
        echo "Test failed: $file"
        echo "Args:"
        if [ -r $arg_file ]; then # Print args if they exist
            cat $arg_file
        fi
        echo "Input:"
        if [ -f $in_file ]; then
            cat $in_file
        fi
        echo "Expected:"
        cat $out_file
        echo "Actual:"
        cat $tmp_out_file
    fi
    
    # Make sure tmp_file is deleted before program exits 
    trap $( rm "$tmp_out_file" ) EXIT

done 

